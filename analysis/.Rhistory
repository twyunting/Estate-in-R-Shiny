type_plot1 <- switch(input$plot_types,
"geom_density()" = geom_density(),
"geom_histogram()" = geom_histogram(),
"geom_freqpoly()" = geom_freqpoly()
)
ggplot(mtcars, aes(x=!!input$x)) +type_plot1
})
}
shinyApp(ui, server)
library(shiny)
library(tidyverse)
data("mtcars")
choice_list <- c("geom_density()", "geom_histogram()", "geom_freqpoly()")
names(choice_list) <- c("Density Plot", "Histogram", "Frequency Polygon")
ui <- fluidPage(
## Create inputs
varSelectInput("x", "X variable", data = mtcars, selected = "mpg"),
radioButtons("plot_types",
label = "Choose a plot type",
choices = choice_list,
selected = choice_list[1]),
## Create Outputs
plotOutput("plot"),
textOutput("text")
)
# server <- function(input, output, session) {
#
#     #plot_type <- geom_histogram()
#
#      output$plot <- renderPlot({
#      type_plot1 <- switch(input$plot_types,
#                         "geom_density()" = geom_density(),
#                         "geom_histogram()" = geom_histogram(),
#                         "geom_freqpoly()" = geom_freqpoly()
#                         )
#      ggplot(mtcars, aes(x=!!input$x)) +type_plot1
#       })
#
# }
server <- function(input, output, session) {
output$plot <- renderPlot({
pl <- ggplot(mtcars, aes(x = !!input$x)) + theme_bw()
if (input$plot_types == "hist") {
pl <- pl + geom_histogram()
} else if (input$type == "freq") {
pl <- pl + geom_freqpoly()
} else {
pl <- pl + geom_density()
}
pl
})
}
shinyApp(ui, server)
library(shiny)
library(tidyverse)
data("mtcars")
choice_list <- c("geom_density()", "geom_histogram()", "geom_freqpoly()")
names(choice_list) <- c("Density Plot", "Histogram", "Frequency Polygon")
ui <- fluidPage(
## Create inputs
varSelectInput("x", "X variable", data = mtcars, selected = "mpg"),
radioButtons("plot_types",
label = "Choose a plot type",
choices = choice_list,
selected = choice_list[1]),
## Create Outputs
plotOutput("plot"),
textOutput("text")
)
# server <- function(input, output, session) {
#
#     #plot_type <- geom_histogram()
#
#      output$plot <- renderPlot({
#      type_plot1 <- switch(input$plot_types,
#                         "geom_density()" = geom_density(),
#                         "geom_histogram()" = geom_histogram(),
#                         "geom_freqpoly()" = geom_freqpoly()
#                         )
#      ggplot(mtcars, aes(x=!!input$x)) +type_plot1
#       })
#
# }
server <- function(input, output, session) {
output$plot <- renderPlot({
pl <- ggplot(mtcars, aes(x = !!input$x)) + theme_bw()
if (input$plot_types == "Histogram") {
pl <- pl + geom_histogram()
} else if (input$type == "Frequency Polygon") {
pl <- pl + geom_freqpoly()
} else {
pl <- pl + geom_density()
}
pl
})
}
shinyApp(ui, server)
library(shiny)
library(tidyverse)
data("mtcars")
choice_list <- c("geom_density()", "geom_histogram()", "geom_freqpoly()")
names(choice_list) <- c("Density Plot", "Histogram", "Frequency Polygon")
ui <- fluidPage(
## Create inputs
varSelectInput("x", "X variable", data = mtcars, selected = "mpg"),
radioButtons("plot_types",
label = "Choose a plot type",
choices = choice_list,
selected = choice_list[1]),
## Create Outputs
plotOutput("plot"),
textOutput("text")
)
# server <- function(input, output, session) {
#
#     #plot_type <- geom_histogram()
#
#      output$plot <- renderPlot({
#      type_plot1 <- switch(input$plot_types,
#                         "geom_density()" = geom_density(),
#                         "geom_histogram()" = geom_histogram(),
#                         "geom_freqpoly()" = geom_freqpoly()
#                         )
#      ggplot(mtcars, aes(x=!!input$x)) +type_plot1
#       })
#
# }
server <- function(input, output, session) {
output$plot <- renderPlot({
pl <- ggplot(mtcars, aes(x = !!input$x)) + theme_bw()
if (input$plot_types == "geom_histogram") {
pl <- pl + geom_histogram()
} else if (input$type == "geom_freqpoly") {
pl <- pl + geom_freqpoly()
} else {
pl <- pl + geom_density()
}
pl
})
}
shinyApp(ui, server)
library(shiny)
library(tidyverse)
data("mtcars")
choice_list <- c("geom_density()", "geom_histogram()", "geom_freqpoly()")
names(choice_list) <- c("Density Plot", "Histogram", "Frequency Polygon")
ui <- fluidPage(
## Create inputs
varSelectInput("x", "X variable", data = mtcars, selected = "mpg"),
radioButtons("plot_types",
label = "Choose a plot type",
choices = choice_list,
selected = choice_list[1]),
## Create Outputs
plotOutput("plot"),
textOutput("text")
)
# server <- function(input, output, session) {
#
#     #plot_type <- geom_histogram()
#
#      output$plot <- renderPlot({
#      type_plot1 <- switch(input$plot_types,
#                         "geom_density()" = geom_density(),
#                         "geom_histogram()" = geom_histogram(),
#                         "geom_freqpoly()" = geom_freqpoly()
#                         )
#      ggplot(mtcars, aes(x=!!input$x)) +type_plot1
#       })
#
# }
server <- function(input, output, session) {
output$plot <- renderPlot({
pl <- ggplot(mtcars, aes(x = !!input$x)) + theme_bw()
if (input$plot_types == "geom_histogram") {
pl <- pl + geom_histogram()
} else if (input$type == "geom_freqpoly") {
pl <- pl + geom_freqpoly()
} else {
pl <- pl + geom_density()
}
pl
})
}
shinyApp(ui, server)
library(shiny)
library(tidyverse)
data("mtcars")
choice_list <- c("geom_density()", "geom_histogram()", "geom_freqpoly()")
names(choice_list) <- c("Density Plot", "Histogram", "Frequency Polygon")
ui <- fluidPage(
## Create inputs
varSelectInput("x", "X variable", data = mtcars, selected = "mpg"),
radioButtons("plot_types",
label = "Choose a plot type",
choices = choice_list,
selected = choice_list[1]),
## Create Outputs
plotOutput("plot"),
textOutput("text")
)
# server <- function(input, output, session) {
#
#     #plot_type <- geom_histogram()
#
#      output$plot <- renderPlot({
#      type_plot1 <- switch(input$plot_types,
#                         "geom_density()" = geom_density(),
#                         "geom_histogram()" = geom_histogram(),
#                         "geom_freqpoly()" = geom_freqpoly()
#                         )
#      ggplot(mtcars, aes(x=!!input$x)) +type_plot1
#       })
#
# }
server <- function(input, output, session) {
output$plot <- renderPlot({
pl <- ggplot(mtcars, aes(x = !!input$x)) + theme_bw()
if (input$plot_types == "geom_histogram()") {
pl <- pl + geom_histogram()
} else if (input$type == "geom_freqpoly()") {
pl <- pl + geom_freqpoly()
} else {
pl <- pl + geom_density()
}
pl
})
}
shinyApp(ui, server)
library(shiny)
library(tidyverse)
data("mtcars")
choice_list <- c("geom_density()", "geom_histogram()", "geom_freqpoly()")
names(choice_list) <- c("Density Plot", "Histogram", "Frequency Polygon")
ui <- fluidPage(
## Create inputs
varSelectInput("x", "X variable", data = mtcars, selected = "mpg"),
radioButtons("plot_types",
label = "Choose a plot type",
choices = choice_list,
selected = choice_list[1]),
## Create Outputs
plotOutput("plot"),
textOutput("text")
)
# server <- function(input, output, session) {
#
#     #plot_type <- geom_histogram()
#
#      output$plot <- renderPlot({
#      type_plot1 <- switch(input$plot_types,
#                         "geom_density()" = geom_density(),
#                         "geom_histogram()" = geom_histogram(),
#                         "geom_freqpoly()" = geom_freqpoly()
#                         )
#      ggplot(mtcars, aes(x=!!input$x)) +type_plot1
#       })
#
# }
server <- function(input, output, session) {
output$plot <- renderPlot({
pl <- ggplot(mtcars, aes(x = !!input$x)) + theme_bw()
if (input$plot_types == "geom_histogram()") {
pl <- pl + geom_histogram()
} else if (input$plot_types == "geom_freqpoly()") {
pl <- pl + geom_freqpoly()
} else {
pl <- pl + geom_density()
}
pl
})
}
shinyApp(ui, server)
library(shiny)
library(tidyverse)
data("mtcars")
choice_list <- c("geom_density()", "geom_histogram()", "geom_freqpoly()")
names(choice_list) <- c("Density Plot", "Histogram", "Frequency Polygon")
ui <- fluidPage(
## Create inputs
varSelectInput("x", "X variable", data = mtcars, selected = "mpg"),
radioButtons("plot_types",
label = "Choose a plot type",
choices = choice_list,
selected = choice_list[1]),
## Create Outputs
plotOutput("plot"),
textOutput("text")
)
server <- function(input, output, session) {
#plot_type <- geom_histogram()
output$plot <- renderPlot({
type_plot1 <- switch(input$plot_types,
"geom_density()" = geom_density(),
"geom_histogram()" = geom_histogram(),
"geom_freqpoly()" = geom_freqpoly()
)
ggplot(mtcars, aes(x=!!input$x)) +type_plot1
})
}
# An alternative way to do the server
# server <- function(input, output, session) {
#   output$plot <- renderPlot({
#
#     pl <- ggplot(mtcars, aes(x = !!input$x)) + theme_bw()
#
#     if (input$plot_types == "geom_histogram()") {
#       pl <- pl + geom_histogram()
#     } else if (input$plot_types == "geom_freqpoly()") {
#       pl <- pl + geom_freqpoly()
#     } else {
#       pl <- pl + geom_density()
#     }
#     pl
# })
# }
shinyApp(ui, server)
library(Sleuth3)
library(tidyverse)
library(broom)
library(ggthemes)
data("ex0332")
head(ex0332)
pub_schools %>%
mutate(dif = OutOfState - InState) %>%
ggplot(aes(x = dif)) +
geom_histogram()
ex0332 %>%
filter(Type == "Public") -> pub_schools
pub_schools %>%
mutate(dif = OutOfState - InState) %>%
ggplot(aes(x = dif)) +
geom_histogram()
tout <-   t.test(pub_schools$OutOfState, pub_schools$InState, data= pub_schools, alternative = "greater")
tidy(tout)
toutb <-   t.test(InState ~Type, data= ex0332, alternative = "greater")
tidy(toutb)
tout_c Ë† <- t.test(OutOfState ~Type, data= ex0332, alternative = "greater")
tout_c <- t.test(OutOfState ~Type, data= ex0332, alternative = "greater")
tidy(tout_c)
x0332 %>%head()
ex0332 %>%head()
pivot_longer(cols = c(InState, OutOfState), names_to  = "location", values_to  = "tuition", names_ptypes = list(location = factor())) %>%
ggplot(aes(x = location, y = tuition, fill = Type)) +
geom_boxplot() +
theme_bw() +
scale_fill_colorblind()
ex0332 %>%
pivot_longer(cols = c(InState, OutOfState), names_to  = "location", values_to  = "tuition", names_ptypes = list(location = factor())) %>%
ggplot(aes(x = location, y = tuition, fill = Type)) +
geom_boxplot() +
theme_bw() +
scale_fill_colorblind()
# consider a log transformation to address exteme value and non-equality of variance
ex0332 %>%
pivot_longer(cols = c(InState, OutOfState), names_to  = "location", values_to  = "tuition", names_ptypes = list(location = factor())) %>%
ggplot(aes(x = location, y = tuition, fill = Type)) +
geom_boxplot() +
theme_bw() +
scale_fill_colorblind() +
scale_y_log10()
toutb <-   t.test(log(InState) ~Type, data= ex0332, alternative = "greater")
tidy(toutb)
exp(toutb$conf.int)
exp(toutb$estimate)
ex0332 %>%
pivot_longer(cols = c(InState, OutOfState), names_to  = "location", values_to  = "tuition", names_ptypes = list(location = factor())) %>%
ggplot(aes(x = location, y = tuition, fill = Type)) +
geom_boxplot() +
theme_bw() +
scale_fill_colorblind()
# consider a log transformation to address exteme value and non-equality of variance
ex0332 %>%
pivot_longer(cols = c(InState, OutOfState), names_to  = "location", values_to  = "tuition", names_ptypes = list(location = factor())) %>%
ggplot(aes(x = location, y = tuition, fill = Type)) +
geom_boxplot() +
theme_bw() +
scale_fill_colorblind() +
scale_y_log10()
toutb <-   t.test(log(InState) ~Type, data= ex0332, alternative = "greater")
tidy(toutb)
exp(toutb$estimate)
exp(toutb$conf.int)
toutc <- t.test(log(OutOfState) ~Type, data= ex0332, alternative = "greater")
tidy(toutc)
exp(toutc$estimate)
exp(toutc$conf.int)
toutc <- t.test(log(OutOfState) ~Type, data= ex0332)
tidy(toutc)
exp(toutc$estimate)
exp(toutc$conf.int)
library(shiny)
library(tidyverse)
data("mtcars")
choice_list <- c("geom_density()", "geom_histogram()", "geom_freqpoly()")
names(choice_list) <- c("Density Plot", "Histogram", "Frequency Polygon")
ui <- fluidPage(
## Create inputs
varSelectInput("x", "X variable", data = mtcars, selected = "mpg"),
radioButtons("plot_types",
label = "Choose a plot type",
choices = choice_list,
selected = choice_list[1]),
## Create Outputs
plotOutput("plot"),
textOutput("text")
)
server <- function(input, output, session) {
#plot_type <- geom_histogram()
output$plot <- renderPlot({
type_plot1 <- switch(input$plot_types,
"geom_density()" = geom_density(),
"geom_histogram()" = geom_histogram(),
"geom_freqpoly()" = geom_freqpoly()
)
ggplot(mtcars, aes(x=!!input$x)) +type_plot1
})
}
# An alternative way to do the server
# server <- function(input, output, session) {
#   output$plot <- renderPlot({
#
#     pl <- ggplot(mtcars, aes(x = !!input$x)) + theme_bw()
#
#     if (input$plot_types == "geom_histogram()") {
#       pl <- pl + geom_histogram()
#     } else if (input$plot_types == "geom_freqpoly()") {
#       pl <- pl + geom_freqpoly()
#     } else {
#       pl <- pl + geom_density()
#     }
#     pl
# })
# }
shinyApp(ui, server)
library(shiny)
library(tidyverse)
ui <- fluidPage(
## Create inputs
textInput("Adjective", "Adjective", value = "cavorting"),
textInput("Noun", "Noun", value = "cow"),
textInput("Verb", "Verb", value = "catapults"),
textInput("Adverb", "Adverb", value = "clumsily"),
textInput("Adverb2", "Adverb", value = "over"),
textInput("Noun2", "Noun", value = "cheesecake"),
## Create Outputs
textOutput("para")
)
server <- function(input, output, session) {
output$para <- renderText({
str_c("The",
input$Adjective,
input$Noun, input$Verb,input$Adverb, input$Adverb2, "the", str_c(input$Noun2, ".", collapse = ""),
sep = " ")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
## Create inputs
varSelectInput("x", "X variable", data=mpg, selected = "cty"),
varSelectInput("y", "Y variable", data=mpg, selected = "hwy"),
varSelectInput("color", "Color variable (categorical)",
data=mpg, selected = "class"),
## Create Outputs
plotOutput("scatter")
)
server <- function(input, output, session) {
output$scatter <- renderPlot({
ggplot(mpg, aes(!!input$x, !!input$y, color = !!input$color)) +
geom_point() +
theme_bw()
})
}
shinyApp(ui, server)
library(Sleuth3)
library(tidyverse)
library(broom)
library(ggthemes)
data("ex0332")
head(ex0332)
ex0332 %>%
filter(Type == "Public") -> pub_schools
pub_schools %>%
mutate(dif = OutOfState - InState) %>%
ggplot(aes(x = dif)) +
geom_histogram()
# Clearly there is a difference
tout <-   t.test(pub_schools$OutOfState, pub_schools$InState, data= pub_schools, alternative = "greater")
tidy(tout)
ex0332 %>%
pivot_longer(cols = c(InState, OutOfState), names_to  = "location", values_to  = "tuition", names_ptypes = list(location = factor())) %>%
ggplot(aes(x = location, y = tuition, fill = Type)) +
geom_boxplot() +
theme_bw() +
scale_fill_colorblind()
# consider a log transformation to address exteme value and non-equality of variance
ex0332 %>%
pivot_longer(cols = c(InState, OutOfState), names_to  = "location", values_to  = "tuition", names_ptypes = list(location = factor())) %>%
ggplot(aes(x = location, y = tuition, fill = Type)) +
geom_boxplot() +
theme_bw() +
scale_fill_colorblind() +
scale_y_log10()
toutb <-   t.test(log(InState) ~Type, data= ex0332, alternative = "greater")
tidy(toutb)
exp(toutb$estimate)
exp(toutb$conf.int)
toutc <- t.test(log(OutOfState) ~Type, data= ex0332, alternative = "greater")
tidy(toutc)
exp(toutc$estimate)
exp(toutc$conf.int)
